# ---
# - name: Ensure WireGuard config directory exists
#   file:
#     path: /etc/wireguard
#     state: directory
#     mode: '0700'

# - name: Deploy WireGuard config file
#   template:
#     src: wg0.conf.j2
#     dest: /etc/wireguard/wg0.conf
#     mode: '0600'

# # Check if community.docker is installed (safe, no sudo)
# - name: Check if community.docker collection is available
#   command: ansible-galaxy collection list community.docker
#   register: docker_collection_check
#   ignore_errors: true
#   delegate_to: localhost
#   changed_when: false
#   run_once: true
#   become: false

# - name: Set fact if docker_collection_available
#   set_fact:
#     docker_collection_available: >-
#       {{ (docker_collection_check.stdout is defined) and
#          ('community.docker' in docker_collection_check.stdout) }}

# # Check if port 51820/udp is in use
# - name: Check if port 51820/udp is in use
#   ansible.builtin.command: ss -lunp
#   register: port_check
#   changed_when: false

# # Stop native WireGuard if it is holding the port
# - name: Stop native WireGuard if wg0 is active
#   ansible.builtin.command: wg-quick down wg0
#   when: port_check.stdout is search("(:51820\\s)")
#   ignore_errors: true

# - name: Disable systemd auto-start for wg0
#   ansible.builtin.systemd:
#     name: wg-quick@wg0
#     enabled: no
#     state: stopped
#   when: port_check.stdout is search("(:51820\\s)")
#   ignore_errors: true

# # Remove stale WireGuard container
# - name: Remove stale WireGuard container if stuck
#   community.docker.docker_container:
#     name: wireguard
#     state: absent
#   ignore_errors: true
#   when: docker_collection_available

# # Deploy WireGuard container (preferred way)
# - name: Deploy WireGuard container with community.docker
#   community.docker.docker_container:
#     name: wireguard
#     image: linuxserver/wireguard:latest
#     state: started
#     restart_policy: always
#     recreate: true
#     privileged: true
#     volumes:
#       - /etc/wireguard:/config
#       - /lib/modules:/lib/modules
#     ports:
#       - "51820:51820/udp"
#     capabilities:
#       - NET_ADMIN
#   when: docker_collection_available

# # Fallback: raw docker run
# - name: Deploy WireGuard container with raw docker run (fallback)
#   command: >
#     docker run -d
#     --name wireguard
#     --restart always
#     --privileged
#     -v /etc/wireguard:/config
#     -v /lib/modules:/lib/modules
#     -p 51820:51820/udp
#     --cap-add=NET_ADMIN
#     linuxserver/wireguard:latest
#   args:
#     creates: /var/lib/docker/containers
#   when: not docker_collection_available
---
- name: Ensure WireGuard config directory exists
  file:
    path: /etc/wireguard
    state: directory
    mode: '0700'

- name: Deploy WireGuard config file
  template:
    src: wg0.conf.j2
    dest: /etc/wireguard/wg0.conf
    mode: '0600'

# Check if port 51820/udp is in use
- name: Check if port 51820/udp is in use
  ansible.builtin.command: ss -lunp
  register: port_check
  changed_when: false

- name: Stop native WireGuard if wg0 is active
  ansible.builtin.command: wg-quick down wg0
  when: port_check.stdout is search("(:51820\\s)")
  ignore_errors: true

- name: Disable systemd auto-start for wg0
  ansible.builtin.systemd:
    name: wg-quick@wg0
    enabled: no
    state: stopped
  when: port_check.stdout is search("(:51820\\s)")
  ignore_errors: true

# Remove stale WireGuard container
- name: Remove stale WireGuard container if stuck
  community.docker.docker_container:
    name: wireguard
    state: absent
  ignore_errors: true

# Deploy WireGuard container
- name: Deploy WireGuard container
  community.docker.docker_container:
    name: wireguard
    image: linuxserver/wireguard:latest
    state: started
    restart_policy: always
    recreate: true
    privileged: true
    volumes:
      - /etc/wireguard:/config
      - /lib/modules:/lib/modules
    ports:
      - "51820:51820/udp"
    capabilities:
      - NET_ADMIN
